# -*- coding: utf-8 -*-
"""Insurence_Price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VMhTY_36y2EgDwhf3KMYCr8isW-guhJB
"""

from numpy.matrixlib.defmatrix import matrix
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data CollectionAnalysis"""

df=pd.read_csv('/content/drive/MyDrive/Machine Learning/Insurence_Price/insurance.csv')

sns.set()
plt.figure(figsize=(6,6))
sns.distplot(df['age'])
plt.title('Age Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=df)
plt.title('Plot Distribution for Sex')
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(df['bmi'])
plt.title("BMI Distribution")
plt.show()

df.head()

plt.figure(figsize=(6,6))
sns.countplot(x='children',data=df)
plt.title('Total Children')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=df)
plt.title("Smoker or Non Smoker")
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='region',data=df)
plt.title('Region')
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(df['charges'])
plt.title("Average Charges")
plt.show()

"""**Data Pre Processing**"""

#Encoding the categorical features
df.replace({'sex':{'male':0,'female':1}},inplace=True)
df.replace({'smoker':{'yes':1,'no':0}},inplace=True)
df.replace({'region':{'southwest':0,'southeast':1,'northwest':2,'northeast':3}},inplace=True)

df.head(10)

"""**Spliting the feature & target**"""

x=df.drop(columns='charges',axis=1)
y=df['charges']

"""**Spliting Traing and Testing Data**"""

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2,random_state=2)

print(x.shape,X_train.shape,X_test.shape)

"""**Model Training**"""

regressor=LinearRegression()

regressor.fit(X_train,Y_train)

#Prediction on training data
training_prediction=regressor.predict(X_train)

#R Square value
r2_train=metrics.r2_score(Y_train,training_prediction)
print('R sqauare value',r2_train)

#Predict on test data
test_prediction=regressor.predict(X_test)

r2_test=metrics.r2_score(Y_test,test_prediction)
print('R square value',r2_test)

#Building a predictive system
input_data=(31,1,25.74,0,0,1)
#Changing input data to numpy array
input_np_array=np.asarray(input_data)
#Reshape the array(To tell we are doing for one particular value)
input_reshape=input_np_array.reshape(1,-1)
predictor=regressor.predict(input_reshape)
print(predictor)